/// This is actually taken from https://github.com/AtropineTears/num-primes
/// But with some refactoring and fixing
use num_bigint::{BigUint, RandBigInt};
use num_integer::Integer;
use num_traits::{One, ToPrimitive, Zero};

/// Settings
/// NIST recommends 5 rounds for miller rabin. This implementation does 8.
/// Apple uses 16. Three iterations has a probability of 2^80 of failing
const MILLER_RABIN_ROUNDS: usize = 8;

pub mod gen {
    use super::*;

    /// Generate Large Composite Numbers
    pub fn new_composite(n: u64) -> BigUint {
        let mut rng = rand::thread_rng();
        loop {
            // Make mutable and set LSB and MSB
            let candidate: BigUint = rng.gen_biguint(n);
            if !is_prime(&candidate) {
                return candidate;
            }
        }
    }
    /// Generate Large Unsigned Integer
    pub fn new_uint(n: u64) -> BigUint {
        let mut rng = rand::thread_rng();
        rng.gen_biguint(n)
    }

    /// Generate Prime Number
    /// This function generates a prime number of n-bits using three primality
    /// tests.
    pub fn new_prime(n: u64) -> BigUint {
        let mut rng = rand::thread_rng();

        loop {
            let mut candidate: BigUint = rng.gen_biguint(n);

            candidate.set_bit(0, true);
            candidate.set_bit(n - 1, true);

            if is_prime(&candidate) {
                return candidate;
            }
        }
    }

    /// Generate Safe Primes
    /// This function will generate safe prime numbers, or numbers of the form p = 2q + 1 where p is the safe prime.
    pub fn safe_prime(n: u64) -> BigUint {
        loop {
            let candidate = new_prime(n);
            if is_safe_prime(&candidate) {
                return candidate;
            }
        }
    }
}

pub mod ver {
    use super::*;
    /// Returns true if the number is prime, with some negligible probability of
    /// incorectness
    pub fn is_prime(n: &BigUint) -> bool {
        super::is_prime(n)
    }
    /// Returns true if the number is composite, with some negligible probability of
    /// incorectness
    pub fn is_composite(n: &BigUint) -> bool {
        !is_prime(n)
    }
    /// Returns true if the number is safe prime, so it has a form of
    /// `p = q * 2 + 1`, where `q` is also prime.
    pub fn is_safe_prime(n: &BigUint) -> bool {
        super::is_safe_prime(n)
    }
}

fn is_divisible_by_small_primes(numb: &BigUint) -> bool {
    static SMALL_PRIMES: [u32; 2048] = [
        2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,
        97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181,
        191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281,
        283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,
        401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,
        509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619,
        631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,
        751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,
        877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997,
        1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093,
        1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213,
        1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303,
        1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439,
        1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543,
        1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627,
        1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753,
        1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877,
        1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999,
        2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111,
        2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239,
        2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347,
        2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447,
        2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593,
        2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699,
        2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801,
        2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927,
        2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061,
        3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203,
        3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323,
        3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457,
        3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557,
        3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673,
        3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797,
        3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919,
        3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049,
        4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159,
        4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283,
        4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441,
        4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561,
        4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679,
        4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813,
        4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957,
        4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077,
        5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209,
        5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351,
        5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477,
        5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591,
        5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717,
        5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849,
        5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987,
        6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121,
        6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257,
        6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359,
        6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521,
        6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659,
        6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781,
        6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907,
        6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019,
        7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187,
        7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321,
        7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487,
        7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583,
        7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703,
        7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867,
        7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009,
        8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147,
        8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273,
        8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423,
        8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573,
        8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693,
        8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819,
        8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951,
        8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091,
        9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221,
        9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349,
        9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467,
        9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623,
        9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749,
        9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871,
        9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037,
        10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141,
        10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259,
        10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357,
        10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499,
        10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631,
        10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739,
        10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883,
        10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003,
        11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131,
        11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261,
        11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393,
        11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503,
        11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677,
        11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801,
        11807, 11813, 11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909,
        11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011,
        12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143,
        12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253, 12263,
        12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391,
        12401, 12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497,
        12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601,
        12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713,
        12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841,
        12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 12953, 12959, 12967,
        12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093,
        13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187,
        13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331,
        13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463,
        13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591, 13597, 13613,
        13619, 13627, 13633, 13649, 13669, 13679, 13681, 13687, 13691, 13693, 13697, 13709, 13711,
        13721, 13723, 13729, 13751, 13757, 13759, 13763, 13781, 13789, 13799, 13807, 13829, 13831,
        13841, 13859, 13873, 13877, 13879, 13883, 13901, 13903, 13907, 13913, 13921, 13931, 13933,
        13963, 13967, 13997, 13999, 14009, 14011, 14029, 14033, 14051, 14057, 14071, 14081, 14083,
        14087, 14107, 14143, 14149, 14153, 14159, 14173, 14177, 14197, 14207, 14221, 14243, 14249,
        14251, 14281, 14293, 14303, 14321, 14323, 14327, 14341, 14347, 14369, 14387, 14389, 14401,
        14407, 14411, 14419, 14423, 14431, 14437, 14447, 14449, 14461, 14479, 14489, 14503, 14519,
        14533, 14537, 14543, 14549, 14551, 14557, 14561, 14563, 14591, 14593, 14621, 14627, 14629,
        14633, 14639, 14653, 14657, 14669, 14683, 14699, 14713, 14717, 14723, 14731, 14737, 14741,
        14747, 14753, 14759, 14767, 14771, 14779, 14783, 14797, 14813, 14821, 14827, 14831, 14843,
        14851, 14867, 14869, 14879, 14887, 14891, 14897, 14923, 14929, 14939, 14947, 14951, 14957,
        14969, 14983, 15013, 15017, 15031, 15053, 15061, 15073, 15077, 15083, 15091, 15101, 15107,
        15121, 15131, 15137, 15139, 15149, 15161, 15173, 15187, 15193, 15199, 15217, 15227, 15233,
        15241, 15259, 15263, 15269, 15271, 15277, 15287, 15289, 15299, 15307, 15313, 15319, 15329,
        15331, 15349, 15359, 15361, 15373, 15377, 15383, 15391, 15401, 15413, 15427, 15439, 15443,
        15451, 15461, 15467, 15473, 15493, 15497, 15511, 15527, 15541, 15551, 15559, 15569, 15581,
        15583, 15601, 15607, 15619, 15629, 15641, 15643, 15647, 15649, 15661, 15667, 15671, 15679,
        15683, 15727, 15731, 15733, 15737, 15739, 15749, 15761, 15767, 15773, 15787, 15791, 15797,
        15803, 15809, 15817, 15823, 15859, 15877, 15881, 15887, 15889, 15901, 15907, 15913, 15919,
        15923, 15937, 15959, 15971, 15973, 15991, 16001, 16007, 16033, 16057, 16061, 16063, 16067,
        16069, 16073, 16087, 16091, 16097, 16103, 16111, 16127, 16139, 16141, 16183, 16187, 16189,
        16193, 16217, 16223, 16229, 16231, 16249, 16253, 16267, 16273, 16301, 16319, 16333, 16339,
        16349, 16361, 16363, 16369, 16381, 16411, 16417, 16421, 16427, 16433, 16447, 16451, 16453,
        16477, 16481, 16487, 16493, 16519, 16529, 16547, 16553, 16561, 16567, 16573, 16603, 16607,
        16619, 16631, 16633, 16649, 16651, 16657, 16661, 16673, 16691, 16693, 16699, 16703, 16729,
        16741, 16747, 16759, 16763, 16787, 16811, 16823, 16829, 16831, 16843, 16871, 16879, 16883,
        16889, 16901, 16903, 16921, 16927, 16931, 16937, 16943, 16963, 16979, 16981, 16987, 16993,
        17011, 17021, 17027, 17029, 17033, 17041, 17047, 17053, 17077, 17093, 17099, 17107, 17117,
        17123, 17137, 17159, 17167, 17183, 17189, 17191, 17203, 17207, 17209, 17231, 17239, 17257,
        17291, 17293, 17299, 17317, 17321, 17327, 17333, 17341, 17351, 17359, 17377, 17383, 17387,
        17389, 17393, 17401, 17417, 17419, 17431, 17443, 17449, 17467, 17471, 17477, 17483, 17489,
        17491, 17497, 17509, 17519, 17539, 17551, 17569, 17573, 17579, 17581, 17597, 17599, 17609,
        17623, 17627, 17657, 17659, 17669, 17681, 17683, 17707, 17713, 17729, 17737, 17747, 17749,
        17761, 17783, 17789, 17791, 17807, 17827, 17837, 17839, 17851, 17863,
    ];

    for p in SMALL_PRIMES.iter() {
        if (numb % p).is_zero() {
            return true;
        }
        // Fixes part of Issue 1 but may slow down generation | https://github.com/AtropineTearz/num-primes/issues/1
        // TODO: maybe check for numb == p
        if (numb / p).is_one() {
            return true;
        }
    }
    false
}

fn is_prime_by_fermat_theorem(prime: &BigUint) -> bool {
    let mut rng = rand::thread_rng();
    let random = rng.gen_biguint_below(prime);

    // p - 1
    let exponent: BigUint = prime - 1u32;

    let result = random.modpow(&exponent, prime);

    result.is_one()
}

fn miller_rabin(candidate: &BigUint, limit: usize) -> bool {
    // One and Two in ramp::Int form
    let two = BigUint::from(2u32);

    // Check Whether Candidate Is 2 (which is prime)
    if candidate == &two {
        return true;
    }

    let (d, r) = rewrite(candidate);

    let mut rng = rand::thread_rng();

    let upper_bound = candidate - 1u32;
    'witness: for _ in 0..limit {
        // Generate Random Number between [2,n-1) | Exclusive End Range; Uses (n-1), not (n-2)
        let a = rng.gen_biguint_range(&two, &upper_bound);

        // (a^d mod n)
        let mut x = a.modpow(&d, candidate);

        if x.is_one() || x == upper_bound {
            continue;
            // return true
        } else {
            // Convert To Usizes For Loop
            // step = (s - 1)
            // TODO: handle when s is too big
            let step = (&r - 1u32).to_usize().expect("sorry, s is too big");

            // Issue #1 | Changed one_usize to zero_usize; step (s-1) was equal to iterations-1 and therefore needed an extra iteration
            for _ in 0..step {
                x = (&x * &x) % candidate;

                if x.is_one() {
                    return false;
                } else if x == upper_bound {
                    continue 'witness;
                }
            }
            return false;
        }
    }
    true
}

// Rewrite for Miller-Rabin
fn rewrite(n: &BigUint) -> (BigUint, BigUint) {
    let two = BigUint::from(2u32);
    let mut s = BigUint::zero();

    // (n-1) becomes even number
    let mut d = n - 1u32;

    // The Main Loop That Checks Whether The Number is even and then divides by 2 and stores a counter
    while d.is_even() {
        d /= &two;
        s += 1u32;
    }

    (d, s)
}

// true = probably prime
// false = not prime (composite)
fn is_prime(candidate: &BigUint) -> bool {
    let two: BigUint = 2u32.into();

    if candidate.is_zero() {
        return false;
    }

    if candidate.is_even() {
        return candidate == &two;
    }

    // First, simple trial divide
    if is_divisible_by_small_primes(candidate) {
        return false;
    }

    // Second, Fermat's little theorem test on the candidate
    if !is_prime_by_fermat_theorem(candidate) {
        return false;
    }

    // Finally, Miller-Rabin test
    miller_rabin(candidate, MILLER_RABIN_ROUNDS)
}

// (p - 1)/2
fn is_safe_prime(number: &BigUint) -> bool {
    let one = BigUint::one();
    let two = &one + &one;

    let result = (number - one) / two;

    is_prime(&result)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn gen_check_128() {
        let prime = gen::new_prime(128);
        assert!(ver::is_prime(&prime), "prime={}", prime);
    }

    #[test]
    fn gen_check_256() {
        let prime = gen::new_prime(256);
        assert!(ver::is_prime(&prime), "prime={}", prime);
    }

    #[test]
    fn verify_pregenerated_primes() {
        // $ openssl prime -generate -bits 512
        let primes: &[BigUint] = &[
            "95715018152575963120325324580161520249843265946356953735668927826251611399187".parse().unwrap(),
            "12572763718577387576073926407226069794459500974749217489523462418942989688310684828105551119462772265122127386698056912631312748229544148500470586541750169".parse().unwrap(),
            "1431740579552217664989323767143807518632521381726901666792493426398886878178086139625521231403036773085753248934613666561963306431341373409534504069271084598687113377787820277916174062033269186736295608886974888770690305505380354273".parse().unwrap(),
            "164246082434381871875319369872348033605379387682140843378162273945713866720468648063118229701168791283329811003932085762749099363520602285908905734765284655156401819283528715632833794783904962184152257188099321900836217371221747022858812317605010853869655929528674368109181147849269181476578707428586266071733".parse().unwrap(),
            "29872759506883955941303326875090424663555595281386508900664564796128774006744421457692921352511281229310006078967253762925222491579646848079825050101649754612547361580696227751229814522133292494487616632122392061272326858356051005422817610994729935621783486951797861678871252927612209217533718931849634051642339776386897791551048009721313981847630568805326291438431661196791147820725039765014605612846893345784567183023545835019516239360765380531123362240138252811488155842983779437046052266187876922313554868960932001842479397143790943376679691445676267877857801288465235106805692199856648644183510313146118671072599".parse().unwrap(),
        ];

        for prime in primes {
            assert!(ver::is_prime(prime), "prime={}", prime);
        }
    }

    #[test]
    fn verify_pregenerated_primes_512() {
        // $ openssl prime -generate -bits 512
        let primes: &[BigUint] = &[
            "12356598408666464736714197870308551008790972122677646294303072278231418262673860209013398323435190228206906914382377442208526753636522093452242503212279641".parse().unwrap(),
            "12508172469393868285248447617546098554277076780111043211017217618335212828851264027557812681536367545751190315122955281792225159785512676367265899080346851".parse().unwrap(),
            "11019043854412246298700176026450697288700522135085332585330709259666695845181364359323952475566496490258874457463940251122696139351888913341590498427236707".parse().unwrap(),
            "12541508665861081196159519261737890499972484268016927862773120469936107512224962975014005521137328334559293210325237663366666170920034478615761699494465073".parse().unwrap(),
            "11119206770771524091279972385615806708426057910046981897211791304044608963912615193220925426984336533849220023160780569096678583160203699846387318210622219".parse().unwrap(),
            "13278004413753685353882580690039110995012821876996262356683987980591166553454022810532914753670393008594722554205637254711228046774464983215808002502544299".parse().unwrap(),
            "12290357040915134563394896844544274416977488548263565563819925338518789308021640950671663257717799576953516160179973136012810356881385349967312300990106527".parse().unwrap(),
            "12071017320234270853667613684419116331883330139265821477324360393923824500098205456563626926233241901541569612386864092199415012462810807583225739704763141".parse().unwrap(),
            "10795837652729199374149518562208009112414390760785880693612169295776487653226183291880837401105579685587326649795294623303225238401120562566878482940391399".parse().unwrap(),
            "10566423199552362620489444390219009615054751024654550673087215928919431347798332876329541154857322115224366282196390749787041879572167801023221541159055171".parse().unwrap(),
            "11791981936756859061883802797369582329902888067957940233923517435662111768452637538963896425187661062279407307759668857779220704839922611236337819147874519".parse().unwrap(),
            "13070818675542370145106283970630056399198096059665723153739468483990332027617831055557334082249068554843864764523908516939773915222139365608613612075995459".parse().unwrap(),
            "11298327230970762862724568614867281961503623518905788600012166710335144285595915886916193699541204186215240744674437585324098005133372030481379846970907141".parse().unwrap(),
            "12587499462630658043685844374983874142102787245426995691926680446101299659934654155169923297336176133215758844994070205893016279417751119648689353427796833".parse().unwrap(),
            "11065065251815246640579926649199438660671303433521051990129624600432446932441854671595792547402945259119492457824769777925657923222792489096159179131119807".parse().unwrap(),
            "10368720947162423757261825054678871819733464417688648655131541507006060288998833259747402977684529119241115646949527150910618704297145026555241735980438711".parse().unwrap(),
            "10126120108121872854101211370148932957601003598057707291290421764015497175445650168663065977765107588398961206373798639733922503024817772385630943753149939".parse().unwrap(),
            "12702932696767901880229551086980884908536330740003507219528381498676776977220812559909276536676593847691523430144946804352433109612153725302468048412038459".parse().unwrap(),
            "13130909557126614443233485778346321560029529290257930455518595699396438089104144603397866675138227757246749617899850555925154085228877660614363343077980309".parse().unwrap(),
            "11981392237850207541301833209728469879294041676020189863458809082703085781364480189512095027643969582474921304137566459717555259470617290496319481860912537".parse().unwrap(),
        ];

        for prime in primes {
            assert!(ver::is_prime(prime), "prime={}", prime);
        }
    }

    #[test]
    fn verify_pregenerated_primes_1024() {
        // $ openssl prime -generate -bits 1024
        let primes: &[BigUint] = &[
            "155124462319026709278093583790566748819383955147450841001494476388007208849235720566911533212719199028352104262367601712810529446973450247708104539962104493517552612914998201773452220512751914438388615159590282541886813271491730222229337248472140595995006218863504375944185815103028906087574658213779859701543".parse().unwrap(),
            "175069978399889629730936201731491604517619986391761688257837761784848219453784739652111276334209563318492915322659396902446121723253296445440567830565030349932494304686294564621102357754053707264267190518224202339874120019978877445216686921006531654199403437215968233813136075122070390368651894013315389919137".parse().unwrap(),
            "142136776218699816717190722890037247409858219739967165063477365084392873775818495940739251718177848027549363239714323438383962215772410549796361731531043374655481919723528600219464158751370690469285860803124185930311525706403398403924867078718044969570795516809712582095610307871304093376060925951992643356277".parse().unwrap(),
            "145839046931610973446098236274293766443076834897953852891641665831933728302038618372353711229214569999650572786368383810869944602168716009777911839428686631156956570042303977547462588006341229039782854236884709945146751605889238775743637890327427329296076267726560093581084800860229420118316527271408714345417".parse().unwrap(),
            "176276009911651791993602935509676400776378625495501275540342315450048215856438569884691617063817786483340431010902863597088443963998912263908284865066632682100880386059820451751788757812000876735898781614685308127380394092394720690805597470240586388575019666353636283394993547266409167768567769832735937760093".parse().unwrap(),
            "175329627548699407188979698404058603181977853597250698921937763058216781253099314263625950254953850040417364698567990283145461663157058843360773884009775202438827556111715011888971920353057086006542112047166972840065349584847528616610048566277973428556738504525162748335945283016776582267719683892915591900967".parse().unwrap(),
            "155941674057353931514553047985207034895360732565176292161730920675283664035257124955495680322663484791077044870871125945528625791363302089010826560168762209629577572703343155268527797332011213850076183489169459354117810604031565235459788966282215004231900009467351069928271771044340159729579847208854623564731".parse().unwrap(),
            "135943131189083968931685479565362667000395258980576580942848972334618340460044778026561284871047286407917561349626024149552285815723729980449839567373449644513249089444524924985561238151588758848941142688870787695190045363936889067930617110135307898452032396890124713213532137047150440135718083702521542451553".parse().unwrap(),
            "157904195415867648498461436995633419034677810169005542144927224440062678728684736384256853086920739294688645601570386933703627377225325735688048124361209913965371787686301853025352072147611989586569673412893445104019111549778565167353823028118311142069718517691083033955843846861259633125663285085462162193849".parse().unwrap(),
            "140530370392820004757132785700845646157555276931196980431640223380511254758707664682310625115294711226174925858872558605223711607767616773198790360687366575851149644208931145465599582704150816019187844665340783092334687057887460165060016050914424516892127452176720667414525516226668396690185441381527837225307".parse().unwrap(),
            "137319251549877320856661686735119263310751738492158425807750159518916841312173495978223573436287197253534061618068299467755932766015660928776102854963529311412584964856485001869586404391529861762617103484259733046099462682846630705995680536257376823231673440580413949793760069373011622286550429745560072107211".parse().unwrap(),
            "171878712673444859892798970061207692107038001355609276192852254112312489524809794597469358868754778232393701808579429946842343368898974824392346332173509575691105774913613013224222354983091923090867867885827403961526890039195543959629579023418901670480179886960423845072279798359822895338571056860333454155933".parse().unwrap(),
            "158297727590719740567440574897639677103127132719446442028664612980608661469677345176677627466850824277638921527202415346727525927178748508075039736642832952227768236178251750140956304941126829929509400142768806821288438719669632372954446882771051642538162668981948286061985136293149909694872047869377701114621".parse().unwrap(),
            "164399014953870193146176671257125938746738384320570653709395351636660435221192440524597738338663160200953651603479947232003302452355455029474619837407789868169967933224824253708764761310235540774967341412750167189125699858916156866812478524586720590882971910311084481835411976584579291789211958459902470872961".parse().unwrap(),
            "178222929826682769461765526873733958798204966621306078433392539499251649122215641114655612177235787794783875257499773955176025879523405234297000034462260162614571066018621503127614126205254520307940014885131219007630617984102361971414563006542659539202362638856015146719712847985539201655989575898822679443703".parse().unwrap(),
            "166932486554237954494374635899530320077130108141250115051566398509331708112713001647894507451045852936171007815878913856027085657745472473590669266660006980583785673177991390796334088040225917777526801689298070632073706578369191879192221302846279980308451521922657259916536752999986298582078525004374053265383".parse().unwrap(),
            "159576962727593876812384658786511876334501465439259069874843596131915739795373541271423177988332238891427760227866426936210555733331800557479163213299941447134399575159721652835440334189232437369247242814972472432856294902107897269709912097149180733423253083455913796520312165108846888579023050710549561596899".parse().unwrap(),
            "137921557360767978679655718808775247289936073023833421535012600108317727380721073452996003752285444108754483593122305016533342371080254702389427566888846235590101932656559837906921804260469721365907156951070444603043463711967635845690434391259430492813965244926091651240806483124262087045235107161663695625463".parse().unwrap(),
        ];

        for prime in primes {
            assert!(ver::is_prime(prime), "prime={}", prime);
        }
    }
}
